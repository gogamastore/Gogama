rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions (No longer used for primary rules, kept for reference/future use if needed) ---
    function userIsAdmin(userId) {
      return exists(/databases/$(database)/documents/user/$(userId)) &&
             get(/databases/$(database)/documents/user/$(userId)).data.role == 'admin';
    }

    // --- User Profiles & Addresses ---
    match /user/{userId} {
      // Any authenticated user can read their OWN profile data.
      allow get: if request.auth.uid == userId;

      // An authenticated user can update their own profile.
      // An admin can update any user's profile.
      allow update: if request.auth.uid == userId || request.auth.token.admin == true;

      // New users are created via server-side logic (registration/add staff) which uses Admin SDK (bypasses rules).
      // This allows users to create their own document on registration.
      allow create: if request.auth.uid == userId;
      
      // An admin can list/delete users.
      allow list, delete: if request.auth.token.admin == true;

      // Addresses subcollection
      match /addresses/{addressId} {
        // A user can manage their own addresses.
        allow read, write, delete, create: if request.auth.uid == userId;
        
        // Admins can also manage any user's addresses.
        allow list: if request.auth.token.admin == true;
      }
    }

    // --- Core Business Collections ---

    // Products can be read by any authenticated user, but only written by admins.
    match /products/{productId} {
      allow read: if request.auth != null;
      allow write: if request.auth.token.admin == true;
    }

    // Orders can be created by any authenticated user for themselves.
    // Admins have full read/write access to all orders.
    // Resellers can only read/update their own orders.
    match /orders/{orderId} {
      // Admins have full access. This covers all queries and individual document access.
      allow read, write: if request.auth.token.admin == true;

      // A reseller can create an order for themselves.
      allow create: if request.auth.uid == request.resource.data.customerId;
      
      // A reseller can get their own order.
      allow get: if request.auth.uid == resource.data.customerId;

      // A reseller can update their order only to cancel it or add a payment proof.
      allow update: if request.auth.uid == resource.data.customerId &&
                      (request.resource.data.status == 'Cancelled' || request.resource.data.keys().hasAny(['paymentProofUrl']));
    }

    // --- Admin-Only Collections ---
    // These collections are managed entirely by admins through the dashboard.
    match /stock_adjustments/{adjustmentId} {
      allow read, write: if request.auth.token.admin == true;
    }
    match /purchase_transactions/{transactionId} {
      allow read, write: if request.auth.token.admin == true;
    }
    match /operational_expenses/{expenseId} {
      allow read, write: if request.auth.token.admin == true;
    }

    // --- Publicly Readable, Admin Writable Collections ---
    
    // Bank accounts are readable by authenticated users for checkout, but only managed by admins.
    match /bank_accounts/{accountId} {
      allow read: if request.auth != null;
      allow write: if request.auth.token.admin == true;
    }

    // Banners are public, managed by admins.
    match /banners/{bannerId} {
      allow read: if true;
      allow write: if request.auth.token.admin == true;
    }

    // Promotions are readable by authenticated users, managed by admins.
    match /promotions/{promoId} {
      allow read: if request.auth != null;
      allow write: if request.auth.token.admin == true;
    }
    
    // Trending products are public, managed by admins.
    match /trending_products/{productId} {
      allow read: if true;
      allow write: if request.auth.token.admin == true;
    }
    
    // Admin contacts are readable by authenticated users, managed by admins.
    match /whatsapp_contacts/{contactId} {
      allow read: if request.auth != null;
      allow write: if request.auth.token.admin == true;
    }
  }
}