rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user has the 'admin' role
    function isAdmin() {
      return exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/user/$(request.auth.uid)).data.role == 'admin';
    }

    // Rules for user data (profiles)
    match /user/{userId} {
      // Admins can create new users. Users can create their own doc on registration.
      allow create: if isAdmin() || request.auth.uid == userId;

      // A user can always read their own profile data. This is essential for role checks.
      allow get: if request.auth.uid == userId;
      
      // An admin can see the list of all users.
      allow list: if isAdmin();

      // A user can update their own data. Admins can update any user's data.
      allow update: if request.auth.uid == userId || isAdmin();
      
      // Only admins can delete users.
      allow delete: if isAdmin();
    }

    // Rules for 'products' collection
    match /products/{productId} {
      // Authenticated users (resellers) can read products.
      allow get, list: if request.auth != null;

      // Admins can do anything with products.
      allow write: if isAdmin();
      
      // Resellers can update products (e.g., to decrease stock during checkout).
      // This is less specific than the admin `write` rule, so it's fine.
      allow update: if request.auth != null;
    }

    // Rules for the 'orders' collection
    match /orders/{orderId} {
        // Admins have full access to all orders for management and reporting.
        allow read, write: if isAdmin();

        // Resellers can create orders for themselves.
        allow create: if request.auth.uid == request.resource.data.customerId;

        // Resellers can only read their own orders.
        allow get: if request.auth.uid == resource.data.customerId;
        
        // Resellers can update their own order only for specific fields.
        allow update: if request.auth.uid == resource.data.customerId &&
                        (request.resource.data.status == 'Cancelled' || request.resource.data.keys().hasAny(['paymentProofUrl']));
    }
    
    // Subcollection for user addresses
    match /user/{userId}/addresses/{addressId} {
        // A user can manage their own addresses.
        allow read, write, delete, create: if request.auth.uid == userId;
    }

    // --- Admin-only or Public-Read Collections ---

    match /whatsapp_contacts/{contactId} {
        allow get, list: if request.auth != null;
        allow write: if isAdmin();
    }

    match /stock_adjustments/{adjustmentId} {
      allow read, write: if isAdmin();
    }

    match /purchase_transactions/{transactionId} {
      allow read, write: if isAdmin();
    }

    match /operational_expenses/{expenseId} {
      allow read, write: if isAdmin();
    }
    
    match /bank_accounts/{accountId} {
        allow read: if request.auth != null;
        allow write: if isAdmin();
    }
    
    match /banners/{bannerId} {
  		allow read: if true;
      allow write: if isAdmin();
    }
    
    match /promotions/{promoId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    match /trending_products/{productId} {
      allow read: if true;
      allow write: if isAdmin();
    }
  }
}
