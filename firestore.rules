rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for admin role
    function isAdmin() {
      return exists(/databases/$(database)/documents/user/$(request.auth.uid)) && 
             get(/databases/$(database)/documents/user/$(request.auth.uid)).data.role == 'admin';
    }

    // Users Collection
    match /user/{userId} {
      // Allow admin to read/write any user document.
      // Allow a user to read/update their own document.
      allow read, update: if request.auth != null && (request.auth.uid == userId || isAdmin());
      // Allow admin to create/delete any user document.
      allow create, delete: if request.auth != null && isAdmin();

      // Subcollection for user addresses
      match /addresses/{addressId} {
        allow read, write, delete: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Products Collection
    match /products/{productId} {
      // Allow any authenticated user to read products (for reseller dashboard).
      // Only allow admins to create, update, or delete products.
      allow read: if request.auth != null;
      allow write: if request.auth != null && isAdmin();
    }

    // Orders Collection
    match /orders/{orderId} {
      // Admins can read/write any order.
      // A user can read/create/update their own orders.
      allow read, update: if request.auth != null && (isAdmin() || request.resource.data.customerId == request.auth.uid);
      allow create: if request.auth != null;
      // Generally, don't allow users to delete orders.
      allow delete: if request.auth != null && isAdmin();
    }

    // Bank Accounts, Stock Adjustments, Purchases, Expenses
    // These should only be managed by admins.
    match /bank_accounts/{accountId} {
      allow read, write, delete: if request.auth != null && isAdmin();
    }
    match /stock_adjustments/{adjustmentId} {
      allow read, write, delete: if request.auth != null && isAdmin();
    }
    match /purchase_transactions/{transactionId} {
      allow read, write, delete: if request.auth != null && isAdmin();
    }
    match /operational_expenses/{expenseId} {
      allow read, write, delete: if request.auth != null && isAdmin();
    }
  }
}
