rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user has the 'admin' role
    function isAdmin() {
      return exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/user/$(request.auth.uid)).data.role == 'admin';
    }

    // Rules for the 'user' collection
    match /user/{userId} {
      // Admins can read and write any user's profile.
      allow write: if isAdmin();
      
      // A user can read and update their own profile.
      allow get, update: if request.auth.uid == userId;

      // New users can create their own user document during registration.
      allow create: if request.auth.uid == userId;
      
      // Admins can list and delete users.
      allow list, delete: if isAdmin();
    }
    
    match /user/{userId}/addresses/{addressId} {
        // A user can manage their own addresses.
        allow read, write, delete, create: if request.auth.uid == userId;
        // Admins can manage any user's addresses.
        allow read, write, delete, create: if isAdmin();
    }

    // Rules for the 'products' collection
    match /products/{productId} {
      // Admins can do anything with products.
      allow write, create, delete: if isAdmin();
      
      // Authenticated users (resellers) can read products.
      allow get, list: if request.auth != null;

      // Allow users to update product stock (for checkout process)
      allow update: if request.auth != null;
    }

    // Rules for the 'orders' collection
    match /orders/{orderId} {
        // Admins can manage all orders.
        allow read, write: if isAdmin();

        // Resellers can create orders for themselves
        allow create: if request.auth.uid == request.resource.data.customerId;

        // Resellers can only read their own specific order.
        allow get: if request.auth.uid == resource.data.customerId;
        
        // Resellers can list orders where their customerId matches.
        allow list: if request.auth.uid == request.query.filters.customerId;
        
        // Resellers can update their own order only for specific fields (e.g., cancelling or uploading proof)
        allow update: if request.auth.uid == resource.data.customerId;
    }

    // Rules for 'whatsapp_contacts'
    match /whatsapp_contacts/{contactId} {
        // Any authenticated user can read the contacts.
        allow get, list: if request.auth != null;
        // Only admins can create, update, or delete contacts.
        allow write, create, delete: if isAdmin();
    }

    // Rules for stock, purchases, and expenses (Admin-only)
    match /stock_adjustments/{adjustmentId} {
      allow read, write: if isAdmin();
    }

    match /purchase_transactions/{transactionId} {
      allow read, write: if isAdmin();
    }

    match /operational_expenses/{expenseId} {
      allow read, write: if isAdmin();
    }
    
    match /bank_accounts/{accountId} {
        allow read: if request.auth != null;
        allow write, create, delete: if isAdmin();
    }
  }
}
