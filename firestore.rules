rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      // Return true if the user has the 'admin' role in their user document.
      return get(/databases/$(database)/documents/user/$(request.auth.uid)).data.role == 'admin';
    }

    // Rules for 'user' collection
    match /user/{userId} {
      // Any logged-in user can read user profiles (needed for isAdmin() to work across rules).
      // Write access is restricted to the user themselves or an admin.
      allow read: if request.auth.uid != null;
      allow write: if request.auth.uid == userId || isAdmin();
    }
    
    // Rules for user's own addresses
    match /user/{userId}/addresses/{addressId} {
        allow read, list, create, update, delete: if request.auth.uid == userId;
    }

    // Rules for 'products' collection
    match /products/{productId} {
      // Admins can manage all products.
      allow write: if isAdmin();
      // Anyone can read product data.
      allow read: if true;
    }
    
    // Rules for 'stock_adjustments' collection
    match /stock_adjustments/{adjustmentId} {
        // Only admins can create stock adjustments.
        allow create: if isAdmin();
        // Only admins can read adjustment history.
        allow read: if isAdmin();
    }
    
    // Rules for 'purchase_transactions' collection
    match /purchase_transactions/{purchaseId} {
      allow create, read: if isAdmin();
    }
    
    // Rules for 'operational_expenses' collection
    match /operational_expenses/{expenseId} {
      allow create, read: if isAdmin();
    }

    // Rules for the 'orders' collection
    match /orders/{orderId} {
        // Admins can manage all orders.
        allow list, create, update, read: if isAdmin();

        // Resellers can create orders for themselves.
        allow create: if request.auth.uid == request.resource.data.customerId;

        // Resellers can only read their own orders.
        allow get: if request.auth.uid == resource.data.customerId;
        
        // Resellers can update their own order only for specific fields (e.g., cancelling or uploading proof).
        allow update: if request.auth.uid == resource.data.customerId &&
                        (request.resource.data.status == 'Cancelled' || request.resource.data.keys().has('paymentProofUrl'));

    }
    
    // Rules for 'bank_accounts' collection
    match /bank_accounts/{accountId} {
      // Anyone logged in can read bank accounts (for checkout).
      allow read: if request.auth.uid != null;
      // Only admins can add, update, or delete bank accounts.
      allow write: if isAdmin();
    }
    
    // Rules for 'whatsapp_contacts' collection
    match /whatsapp_contacts/{contactId} {
       // Anyone logged in can read contacts.
      allow read: if request.auth.uid != null;
      // Only admins can manage contacts.
      allow write: if isAdmin();
    }
    
    // Rules for 'banners' collection
    match /banners/{bannerId} {
      // Anyone can see the banners
      allow read: if true;
      // Only admins can create, update, or delete banners
      allow write: if isAdmin();
    }
    
    // Rules for 'promotions' collection
    match /promotions/{promoId} {
       // Anyone can see active promotions
      allow read: if true;
       // Only admins can create, update, or delete promotions
      allow write: if isAdmin();
    }

  }
}
