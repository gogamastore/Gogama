
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check for admin role
    function isAdmin() {
      return get(/databases/$(database)/documents/user/$(request.auth.uid)).data.role == 'admin';
    }

    // Rules for user data (profiles)
    match /user/{userId} {
      // Admins can create new users (staff/resellers).
      // Users can also create their own user document during registration.
      allow create: if isAdmin() || request.auth.uid == userId;

      // Users can read/update their own profile. Admins can manage any user.
      allow read, update: if request.auth.uid == userId || isAdmin();
      
      // Admins can delete users from the database.
      allow delete: if isAdmin();
      
      // Admins can list all users.
      allow list: if isAdmin();

      // Rules for user's own subcollections, like addresses
      match /{allPaths=**} {
        allow read, write: if request.auth.uid == userId;
      }
    }

    // Rules for products
    match /products/{productId} {
      // Anyone (including unauthenticated users/resellers) can view products.
      allow read: if true;
      // Admins can create/delete products. Resellers can update (for stock reduction on order).
      allow create, delete: if isAdmin();
      allow update: if isAdmin() || request.auth.uid != null;
    }

    // Rules for orders
    match /orders/{orderId} {
        // A user can create an order for themselves.
        allow create: if request.auth.uid == request.resource.data.customerId;
        // A user can read their own orders. Admins can read any order.
        allow read: if request.auth.uid == resource.data.customerId || isAdmin();
        // A user can update their own order (e.g., upload payment proof). Admins can update any order.
        allow update: if request.auth.uid == resource.data.customerId || isAdmin();
        // No one can delete orders directly.
        allow delete: if false;
        // Admins and the specific user can list their own orders.
        allow list: if isAdmin() || (request.auth.uid != null && request.query.where.field == "customerId" && request.query.where.value == request.auth.uid);
    }
    
    // Rules for bank accounts (Admin only)
    match /bank_accounts/{accountId} {
      allow read, write, delete: if isAdmin();
      // Resellers need to read this to make payments
      allow list: if request.auth.uid != null;
    }

    // Rules for stock adjustments (Admin only)
    match /stock_adjustments/{adjustmentId} {
        allow read, write, list: if isAdmin();
    }
    
    // Rules for purchase transactions (Admin only)
    match /purchase_transactions/{transactionId} {
         allow read, write, list: if isAdmin();
    }
    
    // Rules for operational expenses (Admin only)
    match /operational_expenses/{expenseId} {
        allow read, write, list: if isAdmin();
    }

    // Rules for WhatsApp contacts (Admin write, Reseller read)
    match /whatsapp_contacts/{contactId} {
        allow read, list: if request.auth.uid != null;
        allow write, delete: if isAdmin();
    }
  }
}
