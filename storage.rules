
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
  
    // Helper function to check if a user is an admin by looking at their custom claims.
    // NOTE: This requires you to set a custom claim on the admin user(s).
    // You can do this with the Firebase Admin SDK in a secure backend environment.
    // For now, we will check their role in Firestore.
    function isAdmin() {
      // Use exists() instead of get() for security rules in Storage
      return exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/user/$(request.auth.uid)).data.role == 'admin';
    }

    // Product Images: Allow anyone to read, only admins to write.
    match /product_images/{allPaths=**} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Banner Images: Allow anyone to read, only admins to write.
    match /banners/{allPaths=**} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Payment Proofs: Allow authenticated users to upload files.
    // Restrict read access to the user who uploaded it or an admin.
    match /payment_proofs/{fileName} {
      allow read: if isAdmin() || (request.auth != null && resource.metadata.ownerId == request.auth.uid);
      allow create: if request.auth != null; 
      // Add ownerId to metadata on upload from client-side
    }
  }
}
